package com.example.am;


import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.content.res.AssetManager;
import android.content.res.XmlResourceParser;
import android.net.Uri;
import android.os.Bundle;
import android.os.SystemClock;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;

import org.jetbrains.annotations.NotNull;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity {

	public static List<String> Malcious_app_list = new ArrayList<String>();
	public static String stadet = "";
	public static String sumPerm = "", sumPermSdk = "", sumPermVend = "";

	ImageView image;
	boolean cmp;
	String TAG_ITEM1 = "uses-permission";
	String TAG_ITEM2 = "uses-permission-sdk-23";
	Button Remove_button;
	Button Scan_Button;
	List<PackageInfo> apps;
	int counter = 0;
	TextView messScan;
	int malware_count = 0;
	ProgressBar simpleProgressBar;


	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		image = findViewById(R.id.imageView);
		simpleProgressBar = findViewById(R.id.progressBar); // initiate the progress bar
		simpleProgressBar.setVisibility(View.INVISIBLE);

		//run in background
        /*boolean sentAppToBackground = moveTaskToBack(true);
        if(!sentAppToBackground){
            Intent i = new Intent();
            i.setAction(Intent.ACTION_MAIN);
            i.addCategory(Intent.CATEGORY_HOME);
            this.startActivity(i);
        }*/
		Remove_button = findViewById(R.id.button2);
		Scan_Button = findViewById(R.id.button);
		Remove_button.setVisibility(View.INVISIBLE);

		//messege scan
		messScan = findViewById(R.id.textView);
		messScan.setVisibility(View.INVISIBLE);


	}

	public void Detection() {
//the below code related to design
		setContentView(R.layout.activity_main);
		TextView t1 = findViewById(R.id.textView1);
		t1.setText("Malware : " + malware_count);
//this is the first approach: detect based on hash
//to detect malware  based on hash must be extract hash of application via "packagemanger"

		PackageManager manager = getPackageManager();
		apps = manager.getInstalledPackages(0);
		for (PackageInfo packageInfo : apps) {
			ApplicationInfo applicationInfo = packageInfo.applicationInfo;

//there are application systems we are don't care it, so we  care about installed application
//so the two line of code to ensure if the app was installed or not
			boolean isSystemApp = ((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);
			if (isSystemApp == false) {
//to extract hash for every application
				String MD5Hash = GetSignHashesStr(packageInfo.packageName, "MD5");
				String SHAHash = GetSignHashesStr(packageInfo.packageName, "SHA1");
				String SHA256Hash = GetSignHashesStr(packageInfo.packageName, "SHA256");

//to search in firebase to ensure if  hash of application malware or not
				DatabaseReference database = FirebaseDatabase.getInstance().getReference().child("md5");
				Query query1 = database.orderByChild("0").equalTo(MD5Hash);
				query1.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
						if (snapshot.exists()) {
							setContentView(R.layout.activity_main);
							TextView t1 = findViewById(R.id.textView1);
							malware_count += 1;
							t1.setText("Malware : " + malware_count);
							Malcious_app_list.add(packageInfo.packageName);
						}

//to search in firebase to ensure if sha1 of application malware or not
						else {
							DatabaseReference database = FirebaseDatabase.getInstance().getReference().child("sha1");
							Query query1 = database.orderByChild("0").equalTo(SHAHash);
							query1.addListenerForSingleValueEvent(new ValueEventListener() {
								@Override
								public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
									if (snapshot.exists()) {
										Log.e(" Sha1 checker", "exist" + packageInfo.packageName);
										setContentView(R.layout.activity_main);
										TextView t1 = findViewById(R.id.textView1);
										stadet += packageInfo.packageName + "\n";
										Malcious_app_list.add(packageInfo.packageName);
										malware_count += 1;
										t1.setText("Malware : " + malware_count);
									}
//to search in firebase to ensure if sha256 of application malware or not

									else {
										DatabaseReference database = FirebaseDatabase.getInstance().getReference().child("sha256");
										Query query1 = database.orderByChild("0").equalTo(SHA256Hash);
										query1.addListenerForSingleValueEvent(new ValueEventListener() {
											@Override
											public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
												if (snapshot.exists()) {
													Log.e("Sha 256checker", "exist" + packageInfo.packageName);
													setContentView(R.layout.activity_main);
													TextView t1 = findViewById(R.id.textView1);
													malware_count += 1;
													t1.setText("Malware : " + malware_count);
													Malcious_app_list.add(packageInfo.packageName);
												}

//the second approach
//detect based on Deep learning  by classifying permissions of applications
												else {

													try {
//Provides access to an application's raw / asset files
//to extract permissions of application we need to pass the package name
														AssetManager assetManager = createPackageContext(packageInfo.packageName, 0).getAssets();
														XmlResourceParser xml = assetManager.openXmlResourceParser("AndroidManifest.xml");
														int eventType = xml.next();
														while (eventType != XmlPullParser.END_DOCUMENT) {
															if (eventType == XmlPullParser.START_DOCUMENT) {
															} else if (eventType == XmlPullParser.START_TAG) {
																String tag = xml.getName();

																if (TAG_ITEM1.equals(tag)) {  //uses-permission
																	String attrValue = xml.getAttributeValue("http://schemas.android.com/apk/res/android", "name");
																	if (!attrValue.contains("permission.") && attrValue.contains("vending.")) {
																		String[] partsVend = attrValue.split("vending.");
																		String partVe = partsVend[1];
																		sumPermVend += partVe;

																	} else if (attrValue.contains("permission.")) {
																		String[] parts = attrValue.split("permission.");
																		String part2 = parts[1];

																		String sendd = part2;
																		sumPerm += sendd;
																	}
																}

																if (TAG_ITEM2.equals(tag)) {  //uses-permission-sdk-23
																	String attrValue = xml.getAttributeValue("http://schemas.android.com/apk/res/android", "name");
																	String[] parts = attrValue.split("permission.");
																	String part2 = parts[1];

																	String sendd2 = part2;
																	sumPermSdk += sendd2;
																}

															}
															eventType = xml.next();

														}

														xml.close();
													} catch (PackageManager.NameNotFoundException | IOException | XmlPullParserException ignore) {
													}
													String perm = sumPerm + sumPermSdk + sumPermVend;
													Log.d("TAG", sumPerm + sumPermSdk + sumPermVend);

													sumPerm = "";
													sumPermSdk = "";
													sumPermVend = "";
//sleep 10 sec between every request from application to DL model through Flask server
													SystemClock.sleep(10000);
//this is Flask server code to send and receive between python and java
													OkHttpClient okHttpClient = new OkHttpClient();
//to send permission of application in "n1" to Deep learning model
													RequestBody formbody = new FormBody.Builder().add("n1", perm).build();
//this ip of my lab top due to the DL model exist on it.
													Request request = new Request.Builder().url("http://192.168.1.3:5000/").post(formbody).build();
													okHttpClient.newCall(request).enqueue(new Callback() {
														@Override
														public void onFailure(@NotNull Call call, @NotNull IOException e) {
														}
//response function to retrieve result of prediction for permissions
														@Override
														public void onResponse(@NotNull Call call, @NotNull Response response) {
															runOnUiThread(new Runnable() {

																@Override
																public void run() {
																	try {
//if the result of prediction =1 may be the application is malicious
																		String Result_of_prediction = response.body().string();
																		cmp = Result_of_prediction.equals("[1]");
																		if (cmp == true) {
																			setContentView(R.layout.activity_main);
																			TextView t1 = findViewById(R.id.textView1);
																			Malcious_app_list.add(packageInfo.packageName);
																			malware_count += 1;
																			t1.setText("Malware : " + malware_count);
																		}
																	} catch (IOException e) {
																		e.printStackTrace();
																	}


																}
															});


														}
													});


												}
											}

											@Override
											public void onCancelled(@NonNull @NotNull DatabaseError error) {

											}
										});
									}
								}

								@Override
								public void onCancelled(@NonNull @NotNull DatabaseError error) {

								}
							});
						}
					}

					@Override
					public void onCancelled(@NonNull @NotNull DatabaseError error) {
					}
				});
			}//end of if
		}// end of for loop
	} //end of function

	/////////////////////////////////
	//both next functions to extract hashes for every application by passing package name and type of hash
	public String GetSignHashesStr(String pakName, String type) {
		try {
			PackageInfo packageInfo = getPackageManager().getPackageInfo(pakName, PackageManager.GET_SIGNATURES);
			Signature[] signs = packageInfo.signatures;
			Signature sign = signs[0];
			String signStr = EncryptionSign(sign.toByteArray(), type);
			signStr = signStr.toUpperCase();
			return signStr;
		} catch (PackageManager.NameNotFoundException e) {
			e.printStackTrace();
		}
		return "";
	}

	public static String EncryptionSign(byte[] byteStr, String type) {
		MessageDigest messageDigest = null;
		StringBuffer md5StrBuff = new StringBuffer();
		try {
			messageDigest = MessageDigest.getInstance(type);
			messageDigest.reset();
			messageDigest.update(byteStr);
			byte[] byteArray = messageDigest.digest();
			for (int i = 0; i < byteArray.length; i++) {
				if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) {
					md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));
				} else {
					md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
				}
			}
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return md5StrBuff.toString();
	}

//scan button
	public void Scan_Button(View v) {

		Detection();
		Remove_button.setVisibility(View.INVISIBLE);
		Scan_Button.setVisibility(View.INVISIBLE);
		messScan.setVisibility(View.VISIBLE);
		simpleProgressBar.setVisibility(View.VISIBLE);
	}

	public void Remove_button(View v) {
		//to delete malicious applications after scanning
		for (int i = 0; i < Malcious_app_list.size(); i++) {
			Intent intent = new Intent(Intent.ACTION_UNINSTALL_PACKAGE);
			intent.setData(Uri.parse("package:" + Malcious_app_list.get(i)));
			intent.putExtra(Intent.EXTRA_RETURN_RESULT, true);
			startActivity(intent);
		}

	}

}
