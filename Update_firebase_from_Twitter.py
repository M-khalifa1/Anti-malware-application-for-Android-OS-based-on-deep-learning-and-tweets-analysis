# you have to  run this scrip every 48 hour by using task scheduler on windows or cron job in linux
# the purpose of this code to update date bas for anti-malware application with recent malware hashes automatic
import pandas as pd
import re
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
# the below code, to update firebase database with recent malware hashes automatic using Twitter API.
# Stweet library is an unofficial library to collect data from Twitter
# we can search in Twitter by these words in "thislist" and collect tweets that contain these words.
thislist = ["android md5", "android sha1", "android sha 256"]
for x in thislist:
    import stweet as st

    search_tweets_task = st.SearchTweetsTask(
        all_words=x
    )
    tweets_collector = st.CollectorTweetOutput()

    st.TweetSearchRunner(
        search_tweets_task=search_tweets_task,
        tweet_outputs=[tweets_collector, st.CsvTweetOutput("Hashes_from_twitter.csv")]
    ).run()

    tweets = tweets_collector.get_scrapped_tweets()
    print(x)
#########################################################################

# you should download JSON file from the firebase database for the application to do authentication
cred = credentials.Certificate("anydb-ae15a-firebase-adminsdk-lqe4b-8117b97e99.json")
# this link for your database firebase
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://anydb-ae15a-default-rtdb.firebaseio.com/'
})

refmd5 = db.reference('md5')
refsha1 = db.reference('sha1')
refsha2 = db.reference('sha256')

# read tweets from Hashes_from_twitter.csv file which are collected from twitter
df = pd.read_csv("Hashes_from_twitter.csv")
duplicates = []
# this loop to extract MD5, SHA1, SHA256 from every tweet by these Regular expression
for t in (df.full_text):
    Extract_md5_fromTwittes = re.findall(r'(?i)(?<![a-z0-9])[a-f0-9]{32}(?![a-z0-9])', t)
    Extract_sha256_fromTwittes = re.findall(r'(?i)(?<![a-z0-9])[a-f0-9]{64}(?![a-z0-9])', t)
    Extract_sha1_fromTwittes = re.findall(r'(?i)(?<![a-z0-9])[a-f0-9]{40}(?![a-z0-9])', t)

    # to fetch hashes from database to ensure if the hash is repeated or not
    md5fetch = refmd5.get(Extract_md5_fromTwittes)
    sha1fetch = refsha1.get(Extract_sha1_fromTwittes)
    sha256 = refsha2.get(Extract_sha256_fromTwittes)

    Find_Redundant_Md5 = str(Extract_md5_fromTwittes)
    Find_Redundant_sha1 = str(Extract_sha1_fromTwittes)
    Find_Redundant_sha256 = str(Extract_sha256_fromTwittes)

    if Find_Redundant_Md5 in str(md5fetch):
        print("founded")
    # insert hashes in database if the hash was not repeated
    else:
        # to check if the tweet contains on more than one hash , so we have divided every hash in a record
        if len(Extract_md5_fromTwittes) == 2:
            refmd5.push().child("0").set(Extract_md5_fromTwittes[0])  # ['32']
            refmd5.push().child("0").set(Extract_md5_fromTwittes[1])
        elif len(Extract_md5_fromTwittes) == 3:
            refmd5.push().child("0").set(Extract_md5_fromTwittes[0])  # ['32']
            refmd5.push().child("0").set(Extract_md5_fromTwittes[1])
            refmd5.push().child("0").set(Extract_md5_fromTwittes[2])
        elif len(Extract_md5_fromTwittes) == 4:
            refmd5.push().child("0").set(Extract_md5_fromTwittes[0])  # ['32']
            refmd5.push().child("0").set(Extract_md5_fromTwittes[1])
            refmd5.push().child("0").set(Extract_md5_fromTwittes[2])
            refmd5.push().child("0").set(Extract_md5_fromTwittes[3])
        else:
            refmd5.push().set(Extract_md5_fromTwittes)
    # to insert SHA1 hashes in firebase database

    if Find_Redundant_sha1 in str(sha1fetch):
        print("founded")
    else:
        if len(Extract_sha1_fromTwittes) == 2:
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[0])  # ['32']
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[1])
        elif len(Extract_sha1_fromTwittes) == 3:
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[0])  # ['32']
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[1])
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[2])
        elif len(Extract_sha1_fromTwittes) == 4:
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[0])  # ['32']
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[1])
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[2])
            refsha1.push().child("0").set(Extract_sha1_fromTwittes[3])
        else:
            refsha1.push().set(Extract_sha1_fromTwittes)
    # to insert SHA1 hashes in firebase database
    if Find_Redundant_sha256 in str(sha256):
        print("founded")
    else:
        if len(Extract_sha256_fromTwittes) == 2:
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[0])
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[1])
        elif len(Extract_sha256_fromTwittes) == 3:
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[0])
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[1])
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[2])
        elif len(Extract_sha256_fromTwittes) == 4:
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[0])
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[1])
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[2])
            refsha2.push().child("0").set(Extract_sha256_fromTwittes[3])
        else:
            refsha2.push().set(Extract_sha256_fromTwittes)
